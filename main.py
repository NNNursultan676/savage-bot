import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from datetime import datetime
import asyncio
import socket

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = -1002007015749
LEADER_ID = 8090093417  # —Ç–≤–æ–π Telegram ID

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Middleware: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É
class GroupOnlyMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        if message.chat.id != GROUP_ID:
            raise CancelHandler()

dp.middleware.setup(GroupOnlyMiddleware())

# –ó–∞—è–≤–∫–∏ –∏ –ª–æ–≥
join_requests = []
log = []

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Å–µ—Ö ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
@dp.message_handler(commands=['joinlist'])
async def join_list_handler(message: types.Message):
    if not join_requests:
        await message.reply("–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫.")
        return

    for user in join_requests:
        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user['id']}")
        )
        await message.reply(
            f"–ó–∞—è–≤–∫–∞ –æ—Ç @{user['username']} (ID: {user['id']})",
            reply_markup=markup
        )

# –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–Ω—è—Ç—å"
@dp.callback_query_handler(lambda c: c.data.startswith('accept_'))
async def accept_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    admin = callback_query.from_user
    user = next((u for u in join_requests if u['id'] == user_id), None)

    if not user:
        await callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    try:
        await bot.approve_chat_join_request(chat_id=GROUP_ID, user_id=user_id)
        join_requests.remove(user)

        time_accepted = datetime.now().strftime("%d.%m.%Y %H:%M")
        log.append(
            f"‚úÖ {admin.full_name} (@{admin.username or '–Ω–µ—Ç –Ω–∏–∫–∞'}) –ø—Ä–∏–Ω—è–ª(–∞) @{user['username']} (ID: {user['id']}) ‚Äî {time_accepted}"
        )

        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç.")
    except Exception as e:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏.")
        logging.error(e)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ª–∏–¥–µ—Ä–∞ ‚Äî –∂—É—Ä–Ω–∞–ª
@dp.message_handler(commands=['info4leader'])
async def info_for_leader(message: types.Message):
    if message.from_user.id != LEADER_ID:
        return
    if not log:
        await message.reply("–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç.")
    else:
        await message.reply("üìò –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π:\n\n" + "\n".join(log))

# –ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫
@dp.chat_join_request_handler()
async def handle_join_request(request: types.ChatJoinRequest):
    join_requests.append({
        "id": request.from_user.id,
        "username": request.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞"
    })
    await bot.send_message(
        GROUP_ID,
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{request.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'}"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start –≤ –ª–∏—á–∫–µ
@dp.message_handler(commands=['start'], chat_type=types.ChatType.PRIVATE)
async def private_start(message: types.Message):
    await message.reply("‚ùó –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã.")

# –î–ª—è Render ‚Äî —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞
async def hold_port():
    server = await asyncio.start_server(lambda r, w: None, port := int(os.environ.get("PORT", 10000)))
    await server.serve_forever()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(hold_port())  # –¥–ª—è Render
    executor.start_polling(dp, skip_updates=True)
