import logging
import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = -1002007015749
LEADER_ID = 8090093417  # —Ç–≤–æ–π Telegram ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Middleware: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—É
class GroupOnlyMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        if message.chat.id != GROUP_ID:
            raise CancelHandler()

dp.middleware.setup(GroupOnlyMiddleware())

# –î–∞–Ω–Ω—ã–µ
join_requests = []
accepted_users = []
log = []

# –ö–æ–º–∞–Ω–¥–∞ /joinlist
@dp.message_handler(commands=['joinlist'])
async def join_list_handler(message: types.Message):
    if not join_requests:
        sent = await message.reply("–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫.")
        await asyncio.sleep(10)
        await sent.delete()
        return

    for user in join_requests:
        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user['id']}")
        )
        sent = await message.reply(
            f"–ó–∞—è–≤–∫–∞ –æ—Ç @{user['username']} (ID: {user['id']})", reply_markup=markup)
        await asyncio.sleep(15)
        await sent.delete()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('accept_'))
async def accept_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    user = next((u for u in join_requests if u['id'] == user_id), None)

    if not user:
        await callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    try:
        await bot.approve_chat_join_request(chat_id=GROUP_ID, user_id=user_id)
        join_requests.remove(user)
        accepted_users.append(user)
        now = datetime.now().strftime("%d.%m.%Y %H:%M")
        log.append(f"‚úÖ @{callback_query.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'} –ø—Ä–∏–Ω—è–ª @{user['username']} (ID: {user['id']}) –≤ {now}")
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç.")
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    except Exception as e:
        logging.error(e)
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏.", show_alert=True)

# –ö–æ–º–∞–Ω–¥–∞ /info4leader
@dp.message_handler(commands=['info4leader'])
async def info_for_leader(message: types.Message):
    if message.from_user.id != LEADER_ID:
        return

    if not log:
        await message.reply("–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç.")
        return

    text = "\n".join(log)
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª", callback_data="clear_log")
    )
    await message.reply(text, reply_markup=markup)

# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∂—É—Ä–Ω–∞–ª–∞
@dp.callback_query_handler(lambda c: c.data == "clear_log")
async def clear_log(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != LEADER_ID:
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    log.clear()
    await callback_query.answer("–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω.")
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫
@dp.chat_join_request_handler()
async def handle_join_request(request: types.ChatJoinRequest):
    join_requests.append({
        "id": request.from_user.id,
        "username": request.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞"
    })
    await bot.send_message(GROUP_ID, f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{request.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'}")

# –û—Ç–≤–µ—Ç –Ω–∞ /start –≤ –ª–∏—á–∫–µ
@dp.message_handler(commands=['start'], chat_type=types.ChatType.PRIVATE)
async def private_start(message: types.Message):
    await message.reply("‚ùó –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã.")

# –§–∏–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def hold_port():
    server = await asyncio.start_server(lambda r, w: None, port := int(os.environ.get("PORT", 10000)))
    await server.serve_forever()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(hold_port())  # —á—Ç–æ–±—ã Render –Ω–µ –≤—ã–∫–ª—é—á–∞–ª
    executor.start_polling(dp, skip_updates=True)
