import logging
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from flask import Flask
from threading import Thread

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = -1002007015749
LEADER_ID = 8090093417      

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Middleware: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç –≥—Ä—É–ø–ø—ã
class GroupOnlyMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        if message.chat.id != GROUP_ID:
            raise CancelHandler()

dp.middleware.setup(GroupOnlyMiddleware())

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
join_requests = []
accepted_users = []
log = []

# –ö–æ–º–∞–Ω–¥–∞: —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
@dp.message_handler(commands=['joinlist'])
async def join_list_handler(message: types.Message):
    if not join_requests:
        await message.reply("–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫.")
        return

    for user in join_requests:
        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user['id']}")
        )
        await message.reply(f"–ó–∞—è–≤–∫–∞ –æ—Ç {user['username']} (ID: {user['id']})", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å"
@dp.callback_query_handler(lambda c: c.data.startswith('accept_'))
async def accept_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    user = next((u for u in join_requests if u['id'] == user_id), None)

    if not user:
        await callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    try:
        await bot.approve_chat_join_request(chat_id=GROUP_ID, user_id=user_id)
        join_requests.remove(user)
        accepted_users.append(user)
        now = (datetime.utcnow() + timedelta(hours=5)).strftime("%d.%m.%Y %H:%M")  # –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (UTC+5)
        log.append(
            f"‚úÖ {callback_query.from_user.username or 'admin'} –ø—Ä–∏–Ω—è–ª {user['username']} "
            f"(ID: {user['id']}) –≤ {now} –ø–æ –≤—Ä–µ–º–µ–Ω–∏ KZ"
        )
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç.")
    except Exception as e:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏.")
        logging.error(e)

# –ö–æ–º–∞–Ω–¥–∞: –∂—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π
@dp.message_handler(commands=['info4leader'])
async def info_for_leader(message: types.Message):
    if message.from_user.id != LEADER_ID:
        return
    if not log:
        await message.reply("–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç.")
    else:
        await message.reply("\n".join(log))

# –ö–æ–º–∞–Ω–¥–∞: –æ—á–∏—Å—Ç–∫–∞ –∂—É—Ä–Ω–∞–ª–∞
@dp.message_handler(commands=['clearlog'])
async def clear_log(message: types.Message):
    if message.from_user.id == LEADER_ID:
        log.clear()
        await message.reply("–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω.")

# –ö–æ–º–∞–Ω–¥–∞: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä)
@dp.message_handler(commands=['restart'])
async def restart_bot(message: types.Message):
    if message.from_user.id == LEADER_ID:
        await message.reply("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        os._exit(0)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫
@dp.chat_join_request_handler()
async def handle_join_request(request: types.ChatJoinRequest):
    if any(u['id'] == request.from_user.id for u in join_requests):
        return

    join_requests.append({
        "id": request.from_user.id,
        "username": request.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞"
    })
    await bot.send_message(GROUP_ID, f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {request.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start –≤ –ª–∏—á–∫–µ
@dp.message_handler(commands=['start'], chat_type=types.ChatType.PRIVATE)
async def private_start(message: types.Message):
    await message.reply("‚ùó –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã.")

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render / UptimeRobot
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Bot is alive!"

def run_flask():
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    Thread(target=run_flask).start()
    executor.start_polling(dp, skip_updates=True)
